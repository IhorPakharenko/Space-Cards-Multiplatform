[versions]
# @keep
android-compileSdk = "35"
# @keep
android-minSdk = "24"
# @keep
android-targetSdk = "35"
# @keep
ktlint = "1.5.0"
# @keep
ktlintCompose = "0.4.22"
agp = "8.7.3"
androidx-activityCompose = "1.9.3"
androidx-lifecycle = "2.8.4"
coil = "3.0.4"
spotless = "7.0.0.BETA4"
compose = "1.7.6"
compose-plugin = "1.7.3"
coreSplashscreen = "1.0.1"
jetbrainsKotlinJvm = "2.1.0"
junit5 = "1.11.3.0"
kermit = "2.0.5"
kermitKoin = "2.0.5"
koin = "4.0.1"
koinAnnotations = "2.0.0-Beta3"
koinCompose = "4.0.1"
kotest = "5.9.1"
kotestAndroid = "0.1.6"
kotestAssertionsAndroid = "1.1.1"
kotestKoin = "1.3.0"
kotlin = "2.1.0"
kotlinx-coroutines = "1.10.1"
#ksp = "2.0.0-1.0.22"
kotlinxDatetime = "0.6.1"
ksp = "2.1.0-1.0.29"
ktor = "3.0.3"
mockk = "1.13.14"
multiplatformMaterial3WindowSizeClass = "1.7.3"
navigationComposeVersion = "2.8.0-alpha11"
screenshot = "0.0.1-alpha08"
serializationJson = "1.7.3"
sqldelight = "2.0.2"
sqljsDriver = "1.5.5"
turbine = "1.2.0"
uiToolingPreviewAndroid = "1.7.6"

[libraries]
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activityCompose" }
androidx-core-splashscreen = { module = "androidx.core:core-splashscreen", version.ref = "coreSplashscreen" }
androidx-lifecycle-runtime-compose = { module = "org.jetbrains.androidx.lifecycle:lifecycle-runtime-compose", version.ref = "androidx-lifecycle" }
androidx-lifecycle-viewmodel = { module = "org.jetbrains.androidx.lifecycle:lifecycle-viewmodel", version.ref = "androidx-lifecycle" }
androidx-ui-test-junit4-android = { module = "androidx.compose.ui:ui-test-junit4-android", version.ref = "compose" }
androidx-ui-tooling-preview-android = { module = "androidx.compose.ui:ui-tooling-preview-android", version.ref = "uiToolingPreviewAndroid" }
coil-network-ktor = { module = "io.coil-kt.coil3:coil-network-ktor3", version.ref = "coil" }
coil_compose = { module = "io.coil-kt.coil3:coil-compose", version.ref = "coil" }
compose-ui-test-junit4 = { module = "androidx.compose.ui:ui-test-junit4", version.ref = "compose" }
compose-ui-test-manifest = { module = "androidx.compose.ui:ui-test-manifest", version.ref = "compose" }
compose-ui-tooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "compose" }
jetbrains-navigation-compose = { module = "org.jetbrains.androidx.navigation:navigation-compose", version.ref = "navigationComposeVersion" }
kermit = { module = "co.touchlab:kermit", version.ref = "kermit" }
kermit-koin = { module = "co.touchlab:kermit-koin", version.ref = "kermitKoin" }
kermit-koin-js = { module = "co.touchlab:kermit-koin-js", version.ref = "kermit" }
koin-android = { module = "io.insert-koin:koin-android", version.ref = "koin" }
koin-annotations = { module = "io.insert-koin:koin-annotations", version.ref = "koinAnnotations" }
koin-compose = { module = "io.insert-koin:koin-compose", version.ref = "koin" }
koin-compose-viewmodel = { module = "io.insert-koin:koin-compose-viewmodel", version.ref = "koinCompose" }
koin-core = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koin-core-coroutines = { module = "io.insert-koin:koin-core-coroutines", version.ref = "koin" }
koin-ksp-compiler = { module = "io.insert-koin:koin-ksp-compiler", version.ref = "koinAnnotations" }
koin-test = { module = "io.insert-koin:koin-test", version.ref = "koin" }
koin-test-junit5 = { module = "io.insert-koin:koin-test-junit5", version.ref = "koin" }
kotest-assertions-android = { module = "br.com.colman:kotest-assertions-android", version.ref = "kotestAssertionsAndroid" }
kotest-assertions-core = { module = "io.kotest:kotest-assertions-core", version.ref = "kotest" }
kotest-extensions-android = { module = "br.com.colman:kotest-extensions-android", version.ref = "kotestAndroid" }
kotest-extensions-koin = { module = "io.kotest.extensions:kotest-extensions-koin", version.ref = "kotestKoin" }
kotest-framework-datatest = { module = "io.kotest:kotest-framework-datatest", version.ref = "kotest" }
kotest-framework-engine = { module = "io.kotest:kotest-framework-engine", version.ref = "kotest" }
kotest-runner-android = { module = "br.com.colman:kotest-runner-android", version.ref = "kotestAssertionsAndroid" }
kotest-runner-junit5 = { module = "io.kotest:kotest-runner-junit5", version.ref = "kotest" }
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
kotlinx-coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-swing = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-swing", version.ref = "kotlinx-coroutines" }
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinxDatetime" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "serializationJson" }
#ktor-client-cio= {module ="io.ktor:ktor-client-cio", version.ref = "ktor"}
ktor-client-android = { module = "io.ktor:ktor-client-android", version.ref = "ktor" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-darwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
ktor-client-java = { module = "io.ktor:ktor-client-java", version.ref = "ktor" }
ktor-client-js = { module = "io.ktor:ktor-client-js", version.ref = "ktor" }
ktor-serialization-kotlinx-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
mockk-agent = { module = "io.mockk:mockk-agent", version.ref = "mockk" }
mockk-android = { module = "io.mockk:mockk-android", version.ref = "mockk" }
multiplatform-material3-window-size = { module = "org.jetbrains.compose.material3:material3-window-size-class", version.ref = "multiplatformMaterial3WindowSizeClass" }
sqldelight-android = { module = "app.cash.sqldelight:android-driver", version.ref = "sqldelight" }
sqldelight-android-driver = { module = "com.squareup.sqldelight:android-driver", version.ref = "sqljsDriver" }
sqldelight-coroutines = { module = "app.cash.sqldelight:coroutines-extensions", version.ref = "sqldelight" }
sqldelight-native = { module = "app.cash.sqldelight:native-driver", version.ref = "sqldelight" }
sqldelight-native-driver = { module = "com.squareup.sqldelight:native-driver", version.ref = "sqljsDriver" }
sqldelight-sqlite = { module = "app.cash.sqldelight:sqlite-driver", version.ref = "sqldelight" }
sqldelight-sqljs-driver = { module = "com.squareup.sqldelight:sqljs-driver", version.ref = "sqljsDriver" }
turbine = { module = "app.cash.turbine:turbine", version.ref = "turbine" }

[bundles]
ktor-common = [
    "ktor-client-content-negotiation",
    "ktor-client-core",
    "ktor-serialization-kotlinx-json",
]

[plugins]
androidApplication = { id = "com.android.application", version.ref = "agp" }
androidLibrary = { id = "com.android.library", version.ref = "agp" }
compose-compiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
jetbrains-kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "jetbrainsKotlinJvm" }
jetbrainsCompose = { id = "org.jetbrains.compose", version.ref = "compose-plugin" }
junit = { id = "de.mannodermaus.android-junit5", version.ref = "junit5" }
kotest-multiplatform = { id = "io.kotest.multiplatform", version.ref = "kotest" }
kotlinMultiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
screenshot = { id = "com.android.compose.screenshot", version.ref = "screenshot" }
sqldelight = { id = "app.cash.sqldelight", version.ref = "sqldelight" }
spotless = { id = "com.diffplug.spotless", version.ref = "spotless" }

# Plugins defined by this project
# @keep
spacecards-composeMultiplatform = { id = "com.isao.spacecards.composeMultiplatform", version = "unspecified" }
# @keep
spacecards-kotlinMultiplatform = { id = "com.isao.spacecards.kotlinMultiplatform", version = "unspecified" }
